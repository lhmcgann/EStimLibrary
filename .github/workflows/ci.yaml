name: CI Pipeline

on:
  push:
    paths:              # Trigger when source code, sln or prj files, this file, or the xunit config file is changed.
      - '**/*.cs'
      - '**/*.sln'
      - '**/*.csproj'
      - '**/ci.yaml'
      - '**/xunit.runner.json'
    branches:
      - main
      - '**release**'   # Trigger on branches with 'release' in the name
  pull_request:
    paths:              # Trigger when source code, sln or prj files, this file, or the xunit config file is changed.
      - '**/*.cs'
      - '**/*.sln'
      - '**/*.csproj'
      - '**/ci.yaml'
      - '**/xunit.runner.json'
    branches:
      - main
      - '**release**'   # Trigger on branches with 'release' in the name

env:
  SLN_PATH: tests/EStimLibrary.UnitTests/EStimLibrary.UnitTests.sln

jobs:
  build-and-test:
    timeout-minutes: 15
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '7.x' # Adjust to your target .NET version

      #- name: Update dotnet workloads
      #  if: matrix.os == 'windows-latest'
      #  run: dotnet workload restore

      - name: Restore dependencies
        run: dotnet restore $SLN_PATH

      - name: Build solution without restore (non-Windows)
        if: matrix.os != 'windows-latest'
        run: dotnet build $SLN_PATH --no-restore --configuration Release

      - name: Build solution with restore (Windows)
        if: matrix.os == 'windows-latest'
        run: dotnet build $SLN_PATH --configuration Release

      - name: Install ReportGenerator
        run: dotnet tool install -g dotnet-reportgenerator-globaltool

      - name: Run unit tests and collect coverage
        run: dotnet test tests/EStimLibrary.UnitTests/EStimLibrary.UnitTests.csproj --no-build --configuration Release --collect:"XPlat Code Coverage"

      - name: Generate coverage report
        run: |
          reportgenerator -reports:tests/**/coverage.cobertura.xml -targetdir:coverage -reporttypes:Html

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.os }}  # Append OS suffix to artifact name
          path: coverage

