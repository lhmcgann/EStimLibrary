name: Release Pipeline

on:
  release:
    types: [published]

env:
  SLN_PATH: tests/EStimLibrary.UnitTests/EStimLibrary.UnitTests.sln

jobs:
  release-build-assets-unix:
    timeout-minutes: 15
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '7.x' # Adjust to your target .NET version

      - name: Restore dependencies
        run: dotnet restore $SLN_PATH

      - name: Build solution
        run: dotnet build $SLN_PATH --no-restore --configuration Release

      - name: Get release version
        id: get-version
        run: |
          TAG=${{ github.ref_name }}
          VERSION=${TAG#v}
          echo "Version: ${VERSION}"
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"

      - name: Find .dll
        id: find-dll
        run: |
          PATH="src/EStimLibrary/bin/Release/net7.0/EStimLibrary.dll"
          echo "path=$PATH" >> "$GITHUB_OUTPUT"

      - name: Upload .dll
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ steps.find-dll.outputs.path }}
          asset_name: EStimLibrary-${{ steps.get-version.outputs.version }}-${{ runner.os }}.dll
          asset_content_type: application/zip

      - name: Package .dll
        env:
          VERSION: ${{ steps.get-version.outputs.version }}
        run: |
          echo "Version: ${VERSION}"
          dotnet pack src/EStimLibrary/EStimLibrary.csproj --configuration Release --no-build --output nupkg/ /p:PackageVersion="$VERSION"

      - name: List output files
        run: ls -l nupkg/

      - name: Find package name
        id: find-pkg
        env:
          VERSION: ${{ steps.get-version.outputs.version }}
        run: |
          echo "Version: ${VERSION}"
          echo "PKG=nupkg/EStimLibrary.$VERSION.nupkg" >> "$GITHUB_OUTPUT"

      - name: Upload Release Asset
        #uses: tanyagray/action-upload-release-asset@v1.1.3
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ steps.find-pkg.outputs.PKG }}
          asset_name: EStimLibrary-${{ steps.get-version.outputs.version }}-${{ runner.os }}.nupkg
          asset_content_type: application/zip

      - name: Notify of Release
        if: github.event.release.prerelease == false
        run: echo "This is a full release on ${{ matrix.os }}."

      - name: Notify of Pre-Release
        if: github.event.release.prerelease == true
        run: echo "This is a pre-release on ${{ matrix.os }}."

  release-build-assets-windows:
    timeout-minutes: 15

    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '7.x' # Adjust to your target .NET version

      - name: Restore dependencies
        run: dotnet restore $SLN_PATH

      - name: Build solution
        run: dotnet build $SLN_PATH --no-restore --configuration Release

      - name: Get release version
        id: get-version
        run: |
          $TAG = "${{ github.ref_name }}"
          $VERSION = $TAG.Substring(1)
          Write-Host "Version: $VERSION"
          "version=$VERSION" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Find .dll
        id: find-dll
        run: |
          $PATH = "src/EStimLibrary/bin/Release/net7.0/EStimLibrary.dll"
          "path=$PATH" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Upload .dll
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ steps.find-dll.outputs.path }}
          asset_name: EStimLibrary-${{ steps.get-version.outputs.version }}-${{ runner.os }}.dll
          asset_content_type: application/zip

      - name: Package .dll
        env:
          VERSION: ${{ steps.get-version.outputs.version }}
        run: |
          Write-Host "Version: $env:VERSION"
          dotnet pack src/EStimLibrary/EStimLibrary.csproj --configuration Release --no-build --output nupkg/ /p:PackageVersion="$env:VERSION"

      - name: List output files
        run: Get-ChildItem -Path nupkg | Format-Table -Property Name,Length,CreationTime

      - name: Find package name
        id: find-pkg
        env:
          VERSION: ${{ steps.get-version.outputs.version }}
        run: |
          Write-Host "Version: $env:VERSION"
          $PKG = "nupkg/EStimLibrary.$env:VERSION.nupkg"
          "pkg=$PKG" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ steps.find-pkg.outputs.pkg }}
          asset_name: EStimLibrary-${{ steps.get-version.outputs.version }}-${{ runner.os }}.nupkg
          asset_content_type: application/zip

      - name: Notify of Release
        if: github.event.release.prerelease == false
        run: Write-Host "This is a full release on ${{ runner.os }}."

      - name: Notify of Pre-Release
        if: github.event.release.prerelease == true
        run: Write-Host "This is a pre-release on ${{ runner.os }}."
